name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test:coverage
        env:
          ENVIRONMENT: test
          # Use dedicated CI/test API keys with restricted quotas
          # These keys should have minimal permissions and rate limits
          # For most tests, we mock AI services. These are only for integration tests.
          ANTHROPIC_API_KEY: ${{ secrets.CI_ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.CI_OPENAI_API_KEY }}
          # Set flag to use mocked AI services by default
          USE_MOCKED_AI_SERVICES: true

      - name: Generate coverage report
        run: node scripts/merge-coverage.mjs

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/coverage-report.md
            coverage/coverage-summary.json
            execution-api/coverage/lcov.info
            management-api/coverage/lcov.info
            agent-builder/coverage/lcov.info
            cli/coverage/lcov.info
            packages/core/coverage/lcov.info

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('coverage/coverage-report.md', 'utf8');
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('# Test Coverage Report')
            );
            
            const commentBody = coverageReport;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Coverage summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-report.md >> $GITHUB_STEP_SUMMARY